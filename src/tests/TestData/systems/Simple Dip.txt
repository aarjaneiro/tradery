/*
   Copyright (C) 2018-2020 Adrian Michel

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

/*
IMPORTANT DISCLAIMER

These sample trading systems are included for illustrative purpose only.

Using them with real money can lead to substantial financial losses.

DO NOT USE FOR REAL MONEY TRADING OR INVESTMENT DECISIONS.
*/

#define SYSTEM_NAME "Simple Dip"

#define SYSTEM_DESCRIPTION "A very simple implementation of a dip buying/jump shorting trading technique. It will buy at limit if the price is lower than previous close by a dip factor, and similarly, it will short at limit if the price is higher than the previous close by a jump factor. It will exit if the profit reaches a profit factor or if held for more than the holding period"

void run()
{
  int holdingBars = 3;
  int profitTarget = 5;
  // dip factor is 5%
  double dipFactor = 5;
  double jumpFactor = 10;

  Series dipfactor = closeSeries() * 0.95;// - closeSeries() * 0.05;
  Series jumpfactor = closeSeries() * 1.05;//  + closeSeries() * 0.05;

  Pane defPane = getDefaultPane();
  defPane.setBackgroundColor( AZURE );

  defPane.drawSeries( "Dip factor", dipfactor, CRIMSON );
  defPane.drawSeries( "Jump factor", jumpfactor, BLUE );

  Pane p1 = createPane( "new pane", BEIGE );
  p1.drawSeries( "Dip factor", dipfactor, MAGENTA );
  p1.drawSeries( "Jump factor", jumpfactor, BLUE );

  installTimeBasedExit( holdingBars );
  installProfitTarget( profitTarget );
    
  for( Index bar = 5; bar < barsCount(); bar++ )
  {
    applyAutoStops( bar );

    buyAtLimit( bar + 1, ( 1 - dipFactor/100 ) * close( bar ), 
                            1000, "Buy at limit on dip" );
    // short at limit if jump by jumpFactor
    shortAtLimit( bar + 1, ( 1 + jumpFactor/100 ) * close( bar ), 
                            1000, "Short at limit on jump" );
  }
}