/*
   Copyright (C) 2018-2020 Adrian Michel

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#pragma once

#define API_OBJECT "/api"

class TraderyAPI : public tradery::NameValueMap {
 private:
  static const std::wstring m_object;

 protected:
  TraderyAPI(const std::wstring& type) {
    assert(!type.empty());

    __super::add("type", type);

    tradery::VersionPtr version(
        tradery::getFileVersion(tradery::getModuleFileName()));

    if (version) __super::add("version", version->toString());

    std::wstring lang(tradery::getFileLanguage(tradery::getModuleFileName()));

    if (!lang.empty()) __super::add("lang", lang);
  }

 public:
  static const std::wstring& object() { return m_object; }

  void setId(const std::wstring& id) { __super::set("id", id); }
};

using TraderyAPIPtr = std::shared_ptr<TraderyAPI>;

class AuthenticateAPI : public TraderyAPI {
 public:
  AuthenticateAPI(const std::wstring& userName, const std::wstring& password)
      : TraderyAPI("authenticate") {
    assert(!userName.empty());
    assert(!password.empty());

    __super::add("u", userName);
    __super::add("p", password);
  }
};

// gets tradery sessions for a user
class SessionsAPI : public TraderyAPI {
 public:
  SessionsAPI() : TraderyAPI("getsessions") {}
};

class SignalsAPI : public TraderyAPI {
 public:
  SignalsAPI(const std::wstring& traderySessionId) : TraderyAPI("getsignals") {
    __super::add("sessionId", traderySessionId);
  }
};

class RuntimeStatsAPI : public TraderyAPI {
 public:
  RuntimeStatsAPI() : TraderyAPI("getruntimestats") {}
};

class DataInfoAPI : public TraderyAPI {
 public:
  DataInfoAPI(unsigned __int64 mostRecentTimeStamp)
      : TraderyAPI("getdatainfo") {
    __super::add("timestamp", mostRecentTimeStamp);
  }
};

class HeartBeatAPI : public TraderyAPI {
 public:
  HeartBeatAPI() : TraderyAPI("heartbeat") {}
};

// this will set a submitted order information:
//  - order id (generated by the broker)
//  - configuration id
//  - broker account id
class SetOrderIdAPI : public TraderyAPI {
 public:
  SetOrderIdAPI(const std::wstring& signalId, const std::wstring& orderId,
                const std::wstring& accountId,
                const std::wstring& configurationId)
      : TraderyAPI("setorderinfo") {
    __super::add("signalid", signalId);
    __super::add("orderid", orderId);
    __super::add("configurationid", configurationId);
    __super::add("accountid", accountId);
  }
};

class CancelSignalsAPI : public TraderyAPI {
 public:
  CancelSignalsAPI() : TraderyAPI("cancelsignals") {}

  void add(const std::wstring& id) { __super::add("signalid", id); }

  unsigned int count() const { return __super::size() - 1; }
};

class RunSessionAPI : public TraderyAPI {
 public:
  // traderySessionId is not the id of the connection (also a session id)
  // but of the user defined session (with symbols, system etc)
  RunSessionAPI(const std::wstring& traderySessionId,
                tradery::StringPtr balancesAndPositions)
      : TraderyAPI("runsession") {
    assert(!traderySessionId.empty());

    __super::add("sessionId", traderySessionId);
    __super::add("bp",
                 balancesAndPositions ? *balancesAndPositions : std::wstring());
    __super::add("tradesstartdate", "1/1/2020");
  }
};

class PerformanceStatsAPI : public TraderyAPI {
 public:
  PerformanceStatsAPI() : TraderyAPI("getperformancestats") {}
};

class RunSystemsAPI : public TraderyAPI {
 public:
  // traderySessionId is not the id of the connection (also a session id)
  // but of the user defined session (with symbols, system etc)
  RunSystemsAPI(const tradery::StringPtr systemIds,
                tradery::StringPtr symbolsList, tradery::StringPtr parameters,
                tradery::StringPtr positionSizing,
                tradery::StringPtr externalVars, tradery::StringPtr options,
                std::wstring tradesStartDate)
      : TraderyAPI("runsystems") {
    assert(systemIds);
    assert(symbolsList);
    assert(parameters);
    assert(positionSizing);
    assert(externalVars);
    assert(options);

    assert(!systemIds->empty());
    assert(!symbolsList->empty());

    __super::add("systems", *systemIds);
    __super::add("symbolsList", *symbolsList);
    __super::add("parameters", *parameters);
    __super::add("positionSizing", *positionSizing);
    __super::add("externalVars", *externalVars);
    __super::add("options", *options);
    __super::add("tradesstartdate", tradesStartDate);
  }
};

class GetActiveEntrySignalsAPI : public TraderyAPI {
 public:
  GetActiveEntrySignalsAPI(const std::wstring& traderySessionId)
      : TraderyAPI("getactiveentrysignals") {
    assert(!traderySessionId.empty());

    __super::add("sessionId", traderySessionId);
  }
};

class CancelSession : public TraderyAPI {
 public:
  CancelSession() : TraderyAPI("cancelsession") {}
};
