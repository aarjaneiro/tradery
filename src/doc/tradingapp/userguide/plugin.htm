<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Plugins Plug</title>
</head>

<body>

<h1>Plug-ins</h1>

<hr color="#C4DDD7">

<h2>Plug-ins</h2>
<p>One of the goals of the TradingApp Platform is to enable development and use 
of component based trading system applications. The components used by the 
Trading Platform are referred to as plug-ins.</p>
<p>Each plug-in represents a class of components and it exposes the 
functionality necessary for loading, unloading, creating instances of it etc. To 
make use of the functionality a plug-in implements, instances of it must be 
created. These instances are called plug-in configurations and they expose the 
specific functionality of the plug-in in a form that is usable by other 
components of the TradingApp platform.</p>
<p>Plug-ins are the main extensibility mechanism provided by the TradingApp 
Platform. A plug-in is a component that provides specific services and which can 
be dynamically discovered and loaded at runtime. Currently supported plug-in 
types are:</p>
<ul>
  <li>runnable (a generalization of the concept of a trading system)</li>
  <li>data source</li>
  <li>symbols source</li>
  <li>signal handler</li>
  <li>slippage</li>
  <li>commission</li>
</ul>
<p>To make plug-ins known to the TradingApp platform, simply store them in a 
location that is in the plug-in path, which can be set in the Setting dialog or 
on the command line. The Integrated Visual Trading Environment (IVTE) will then 
show the available plug-ins in the Plug-in Explorer bar.</p>
<p><b>Note</b>: New types of plug-ins are under development and will be provided 
as part of future releases.</p>
<p>All plug-ins must implement a simple and generic protocol, by means of an 
open C++ API to enable them to communicate with TradingApp at runtime. Plug-ins 
are implemented as DLLs (dynamic link library). A DLL can contain several 
plug-ins, although there can be at most one plug-in of each type in any one DLL.</p>
<p>Although developing plug-ins is a straightforward process thanks to the 
various plug-in helper classes, most users will be able to get the necessary 
components in binary format either as part of the TradingApp platform package or 
from third party developers. Data sources, symbols source, trading signal 
handlers for automated trading, etc will be developed for various data providers 
and online brokerage firms. Trading systems released as black boxes will also be 
available, and this package will give the user the ability to back-test them and 
verify the claims made by the developers before they use them in real trading, 
as well as configure, optimize, combine them with other systems etc.&nbsp;</p>
<p>Some users will also want to implement and test their own trading ideas. 
Currently this can be achieved by writing trading systems in C++ using Visual 
Studio .net 2003. Although this involves some programming, it should be a 
relatively easy task for most users because:&nbsp;</p>
<ul>
  <li>a lot of the basic or even advanced functionality needed to develop 
  trading systems is already implemented and presented as easy to use APIs and 
  classes,</li>
  <li>the level of the language needed to write trading systems is minimal, and 
  comparable to other similar packages, although one could also use the full 
  power of C++ to implement more advanced ideas</li>
  <li>the trading system structure is very modular, which makes it easier to 
  program, as the user only needs to focus on small tasks at various stages of 
  the development process.</li>
  <li>the pre-packaged sample projects provide an easy starting point for even 
  the most inexperienced programmer.</li>
</ul>
<p>Future versions will provide more options, by means of other free C++ 
development environments, or by creating special adapter plug-ins acting as 
bridges between the TradingApp Platform and components developed using other 
tools and/or languages.</p>
<p>Note: various plug-in wizards which will make these tasks even easier will 
also be provided in the future. </p>
<h2>Plug-in Configurations</h2>
<p>A plug-in, to be useful, must be able to provide at least one configuration, 
although many plug-ins will be capable of handling the creation of more than one 
configuration.</p>
<p>For example, a typical plug-in is the pre-packaged file based data source 
plug-in which can access data stored on files, in various formats. Various 
configurations of this plug-in could point to different data location and/or to 
recognize different data formats. Similarly, configurations of the file based 
symbols source plug-in can each point to&nbsp;different symbols files, containing 
different sets of symbols.</p>
<p>All plug-ins and plug-in configurations have 3 main properties:</p>
<ul>
  <li>unique id.</li>
  <li>name</li>
  <li>description</li>
</ul>
<p>The first is used by the platform to uniquely identify each component, while 
the last two serve only a descriptive purpose to allow users to easily identify 
components and their functionality.</p>
<p>Besides their primary purpose of providing specific trading related 
functional services, all plug-in configurations can also provide their own UI, 
either for visual feedback and/or to enable user control of their parameters and 
functionality. There are no limitations in terms of what a plug-in configuration 
can show in its UI. Also, the plug-in protocol ensures a seamless integration 
between any plug-in configuration UI and all the other visual elements of the 
IVTE.</p>
<h2>Types of plug-ins</h2>
<p><b>Runnables</b> implement the very general concept of “something that can be 
run”. The most common type of a runnable is a plain trading system.</p>
<p>For a runnable to be run, various other components must be associated with 
it, some mandatory (data source and symbols source) and others optional 
(slippage, commission, signal handlers).<br>
Data Sources can be static or real-time (dynamic). Static data sources are 
normally used in back-testing or in sessions where data is not processed for 
real-time use (optimization, walk-forward analysis etc), while dynamic data 
sources are primarily intended for real-time use, such as in an automated 
trading application.</p>
<p><b>Symbols Sources</b> are a generalization of the concept of symbols lists – 
the only requirement for a symbols source is to be able to provide the “next” 
symbol and to signal when there are no more symbols available. This allows 
symbols to come from any physical source and to have more complex behavior than 
just a static list of symbols - they could even be designed to actually change 
at runtime based on various conditions, thus effectively becoming part of the 
trading system.</p>
<p><b>Note</b>: A dynamic symbols source could of course be implemented in the 
trading system itself (and in many other tools this is how it is done, because 
there are no other easy ways), but that makes re-using that logic in other 
trading setups difficult. Implementing it in a separate component that handles 
the symbols makes much more sense and makes it easily reusable. This philosophy 
applies to all other types of plug-ins.</p>
<p><b>Signal handlers</b> receive trading signals generated at runtime, which 
they can process in various ways: submit them for execution, calculate 
statistics, store them for later use etc.</p>
<p><b>Slippage </b>plug-ins implement slippage algorithms for use in 
back-testing. Slippage plug-in configurations are provided with information such 
as type of order, size etc, and they return a slippage value, which is then used 
by the trading engine to generate simulated positions.</p>
<p><b>Note</b>: Obviously, real slippage values are unpredictable, but a number 
of assumptions can usually be made to model an approximation of the real 
slippage. For instance, there is a somewhat reverse relationship (not 
necessarily linear though) between volume and slippage. By using the appropriate 
slippage plug-in configuration and parameters to the right markets in 
back-testing, simulated trading becomes much more realistic, which leads to a 
higher level of confidence that the system will perform as expected in real 
trading.&nbsp;</p>
<p><b>Commission</b> plug-ins implement commission algorithms for use in 
back-testing. They are also used to make the back-testing more realistic and to 
show the effect of commission on a system's performance.</p>
<p>Other types of plug-ins are under development and will be added in the 
future: position handler plug-in, system loop handler plug-in, open position 
handler plug-in etc., the final goal is to encourage sharing of pre-built 
trading components, thus enabling users to define most trading system and setups 
by visually combining a multitude of these existing components, with little or 
no coding.</p>
<p>Besides their declared functionality, all plug-in configuration associated 
with a session receive various notification about the session status and 
parameters. These can be used to implement virtually any type of functionality 
in plug-ins, such as statistics (with or without graphic UI), charting of data 
or of the generate trades, optimizers etc. These notification are described in 
Pgrammer's Guide and in the API documentation.</p>

</body>

</html>